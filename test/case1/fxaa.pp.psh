# 1 "Fxaa.psh"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "Fxaa.psh"
# 1 "xcompile.hlsli" 1
# 2 "Fxaa.psh" 2
# 1 "Fxaa3_11.h" 1
# 21 "Fxaa3_11.h"
struct FxaaTex { SamplerState smpl; Texture2D tex; };







float FxaaLuma(float4 rgba) { return rgba.y; }


float4 FxaaPixelShader(



    float2 pos,





    FxaaTex tex,





    float2 fxaaQualityRcpFrame,
# 60 "Fxaa3_11.h"
    float fxaaQualitySubpix,
# 71 "Fxaa3_11.h"
    float fxaaQualityEdgeThreshold,
# 86 "Fxaa3_11.h"
    float fxaaQualityEdgeThresholdMin
) {

    float2 posM;
    posM.x = pos.x;
    posM.y = pos.y;

    float4 rgbyM = tex.tex.SampleLevel(tex.smpl, posM, 0.0);


    float lumaS = FxaaLuma(tex.tex.SampleLevel(tex.smpl, posM, 0.0, int2( 0, 1)));
    float lumaE = FxaaLuma(tex.tex.SampleLevel(tex.smpl, posM, 0.0, int2( 1, 0)));
    float lumaN = FxaaLuma(tex.tex.SampleLevel(tex.smpl, posM, 0.0, int2( 0,-1)));
    float lumaW = FxaaLuma(tex.tex.SampleLevel(tex.smpl, posM, 0.0, int2(-1, 0)));

    float maxSM = max(lumaS, rgbyM.w);
    float minSM = min(lumaS, rgbyM.w);
    float maxESM = max(lumaE, maxSM);
    float minESM = min(lumaE, minSM);
    float maxWN = max(lumaN, lumaW);
    float minWN = min(lumaN, lumaW);
    float rangeMax = max(maxWN, maxESM);
    float rangeMin = min(minWN, minESM);
    float rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;
    float range = rangeMax - rangeMin;
    float rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);
    bool earlyExit = range < rangeMaxClamped;

    if(earlyExit)
            return rgbyM;

    float lumaNW = FxaaLuma(tex.tex.SampleLevel(tex.smpl, posM, 0.0, int2(-1,-1)));
    float lumaSE = FxaaLuma(tex.tex.SampleLevel(tex.smpl, posM, 0.0, int2( 1, 1)));
    float lumaNE = FxaaLuma(tex.tex.SampleLevel(tex.smpl, posM, 0.0, int2( 1,-1)));
    float lumaSW = FxaaLuma(tex.tex.SampleLevel(tex.smpl, posM, 0.0, int2(-1, 1)));

    float lumaNS = lumaN + lumaS;
    float lumaWE = lumaW + lumaE;
    float subpixRcpRange = 1.0/range;
    float subpixNSWE = lumaNS + lumaWE;
    float edgeHorz1 = (-2.0 * rgbyM.w) + lumaNS;
    float edgeVert1 = (-2.0 * rgbyM.w) + lumaWE;

    float lumaNESE = lumaNE + lumaSE;
    float lumaNWNE = lumaNW + lumaNE;
    float edgeHorz2 = (-2.0 * lumaE) + lumaNESE;
    float edgeVert2 = (-2.0 * lumaN) + lumaNWNE;

    float lumaNWSW = lumaNW + lumaSW;
    float lumaSWSE = lumaSW + lumaSE;
    float edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);
    float edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);
    float edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;
    float edgeVert3 = (-2.0 * lumaS) + lumaSWSE;
    float edgeHorz = abs(edgeHorz3) + edgeHorz4;
    float edgeVert = abs(edgeVert3) + edgeVert4;

    float subpixNWSWNESE = lumaNWSW + lumaNESE;
    float lengthSign = fxaaQualityRcpFrame.x;
    bool horzSpan = edgeHorz >= edgeVert;
    float subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;

    if(!horzSpan) lumaN = lumaW;
    if(!horzSpan) lumaS = lumaE;
    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;
    float subpixB = (subpixA * (1.0/12.0)) - rgbyM.w;

    float gradientN = lumaN - rgbyM.w;
    float gradientS = lumaS - rgbyM.w;
    float lumaNN = lumaN + rgbyM.w;
    float lumaSS = lumaS + rgbyM.w;
    bool pairN = abs(gradientN) >= abs(gradientS);
    float gradient = max(abs(gradientN), abs(gradientS));
    if(pairN) lengthSign = -lengthSign;
    float subpixC = saturate(abs(subpixB) * subpixRcpRange);

    float2 posB;
    posB.x = posM.x;
    posB.y = posM.y;
    float2 offNP;
    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;
    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;
    if(!horzSpan) posB.x += lengthSign * 0.5;
    if( horzSpan) posB.y += lengthSign * 0.5;

    float2 posN;
    posN.x = posB.x - offNP.x * 1.0;
    posN.y = posB.y - offNP.y * 1.0;
    float2 posP;
    posP.x = posB.x + offNP.x * 1.0;
    posP.y = posB.y + offNP.y * 1.0;
    float subpixD = ((-2.0)*subpixC) + 3.0;
    float lumaEndN = FxaaLuma(tex.tex.SampleLevel(tex.smpl, posN, 0.0));
    float subpixE = subpixC * subpixC;
    float lumaEndP = FxaaLuma(tex.tex.SampleLevel(tex.smpl, posP, 0.0));

    if(!pairN) lumaNN = lumaSS;
    float gradientScaled = gradient * 1.0/4.0;
    float lumaMM = rgbyM.w - lumaNN * 0.5;
    float subpixF = subpixD * subpixE;
    bool lumaMLTZero = lumaMM < 0.0;

    lumaEndN -= lumaNN * 0.5;
    lumaEndP -= lumaNN * 0.5;
    bool doneN = abs(lumaEndN) >= gradientScaled;
    bool doneP = abs(lumaEndP) >= gradientScaled;
    if(!doneN) posN.x -= offNP.x * 1.5;
    if(!doneN) posN.y -= offNP.y * 1.5;
    bool doneNP = (!doneN) || (!doneP);
    if(!doneP) posP.x += offNP.x * 1.5;
    if(!doneP) posP.y += offNP.y * 1.5;


    float dstN = posM.x - posN.x;
    float dstP = posP.x - posM.x;
    if(!horzSpan) dstN = posM.y - posN.y;
    if(!horzSpan) dstP = posP.y - posM.y;

    bool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;
    float spanLength = (dstP + dstN);
    bool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;
    float spanLengthRcp = 1.0/spanLength;

    bool directionN = dstN < dstP;
    float dst = min(dstN, dstP);
    bool goodSpan = directionN ? goodSpanN : goodSpanP;
    float subpixG = subpixF * subpixF;
    float pixelOffset = (dst * (-spanLengthRcp)) + 0.5;
    float subpixH = subpixG * fxaaQualitySubpix;

    float pixelOffsetGood = goodSpan ? pixelOffset : 0.0;
    float pixelOffsetSubpix = max(pixelOffsetGood, subpixH);
    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;
    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;
    return float4(tex.tex.SampleLevel(tex.smpl, posM, 0.0).xyz, rgbyM.w);
}
# 3 "Fxaa.psh" 2

struct Input
{
 float4 Position: SV_Position;
 float2 TexCoord : TEXCOORD0;
};

cbuffer PsConstants : register(b0) {
float4 InvResolution : packoffset(c0);
float4 QualitySettings : packoffset(c1);
};

Texture2D FrameTextureTexture : register(t0); SamplerState FrameTextureSampler : register(s0);;

float4 main(Input input) : SV_Target
{
 FxaaTex FrameTexture; FrameTexture.smpl = FrameTextureSampler; FrameTexture.tex = FrameTextureTexture;;

 float4 output = FxaaPixelShader(
  input.TexCoord,
  FrameTexture,
  InvResolution.xy,
  QualitySettings.x,
  QualitySettings.y,
  QualitySettings.z
 );

 output.a = 1.0f;
 return output;
}
